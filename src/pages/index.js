import React, { useEffect, useState } from "react";
import { StaticImage } from "gatsby-plugin-image";
import Layout from "../components/layout";
import Seo from "../components/seo";

let vgObj = require("../../static/contacts_vg-clipped.json");

const IndexPage = () => {

  const [vgJson, setVgJson] = useState({});
  const [slots, setSlots] = useState(300);

  useEffect(() => {
    let vbObj = {};
    
    for (let i=1; i <= slots; i++) {
      let key, path, milli;
      if (i >= 100) {
        key = "1234567" + i;
        path = "../../DD/0000000" + i + ".mp4"
        milli = i;
      } 
      if (i < 100) {
        key = "12345670" + i;
        path = "../../DD/00000000" + i + ".mp4"
        milli = "0" + i;
      }
      if (i < 10) {
        key = "123456700" + i;
        path = "../../DD/000000000" + i + ".mp4"
        milli = "00" + i;
      }
      
      let addVg = {
          "createdDate":"2021-08-15T22:34:28." + milli,
          "id":key,
          "isKeyframeCorrupted":false,
          "isRead":true,
          "isVideogramCorrupted":false,
          "keyframe":"254898489.png",
          "mailType":"VOutMail",
          "orientation":"Landscape",
          "recipientID":"T51485",
          "syncStatus":"ON_DEVICE",
          "videoPath":path
        }

        vbObj[key] = addVg;
    }

    setVgJson(vbObj);
  }, [slots]);

  const handleFile = (e) => {
    const jsoncontent = e.target.result;
    let a = document.createElement("a");
    a.setAttribute("href", "data:text/json;charset=utf-8," + encodeURIComponent(jsoncontent));
    a.setAttribute("download", "contacts_vg.json");
    a.click();
  }

  const handleGram = (file) => {
    let fileData = new FileReader();
    fileData.onloadend = handleFile;
    fileData.readAsText(file);
  }

  const handleGeneric = () => {

    vgObj.contactList[Object.keys(vgObj.contactList)[0]].videogrames = vgJson;
    let a = document.createElement("a");
    a.setAttribute("href", "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(vgObj)));
    a.setAttribute("download", "contacts_vg.json");
    a.click();
  }

  return (
  <Layout>
    <Seo title="Home" />
    <StaticImage
      src="../images/smash.jpg"
      width={200}
      quality={95}
      formats={["AUTO", "WEBP", "AVIF"]}
      alt="A gram smasher..."
      style={{ marginBottom: `1.45rem` }}
    />
    <h1>Give me gram to smash.</h1>
    <h3>These buttons genrate a json file called contact_vg.json</h3>
    <h3>
      You will replace the contact_vg.json in the videograms directory of your tablet
      with the one generated here. 
    </h3>
    <h3>
      Once you've done that, create your trusty DD folder at the root of your tablet. Name your movies
      as follows: 0000000001.MP4    -     0000000002.MP4    -    0000000100.MP4
      IT'S IMPORTANT THAT THE FILE NAME BE 10 DIGITS LONG.
    </h3>
    <p>
      For either of these options to work, you need to have had videograms on your tablet at some
      point.
    </p>
    <p>
      <p>
      If you use the option below, delete all the videograms using the tablet interface.
      Then, overwrite the contacts_vg file with the file generated by the button below.
      This method doesn't give you any of your grams that you already had. It just adds
      300 slots for movies, or however many slots you enter in the field.
      </p>
      How many slots do you want? 
      <input onChange={(e) => {
        setSlots(e.target.value);
      }
      } 
      type="text" 
      value={slots} /> &nbsp;&nbsp;&nbsp;
      <button onClick={handleGeneric}>Download Generic contacts_vg</button>
    </p>
    <p>
      <p>
        <h3>This is in beta version. Currently for testing only.</h3>
        This option will take your current contact_vg.json file, and add a given number of slots 
        to it. This will allow you to keep your current video grams, and just tack some slots on
        after them.
      </p>
      <input type="file" onChange={e => handleGram(e.target.files[0])} />
    </p>
  </Layout>
  )
}

export default IndexPage;
